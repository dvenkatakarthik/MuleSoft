<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:db="http://www.mulesoft.org/schema/mule/db" xmlns:cluster="http://www.mulesoft.org/schema/mule/ee/cluster"
	xmlns:http="http://www.mulesoft.org/schema/mule/http" xmlns:dw="http://www.mulesoft.org/schema/mule/ee/dw"
	xmlns:json="http://www.mulesoft.org/schema/mule/json" xmlns:validation="http://www.mulesoft.org/schema/mule/validation"
	xmlns:tracking="http://www.mulesoft.org/schema/mule/ee/tracking"
	xmlns:scripting="http://www.mulesoft.org/schema/mule/scripting"
	xmlns:jms="http://www.mulesoft.org/schema/mule/jms" xmlns="http://www.mulesoft.org/schema/mule/core"
	xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
	xmlns:spring="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-current.xsd
http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/jms http://www.mulesoft.org/schema/mule/jms/current/mule-jms.xsd
http://www.mulesoft.org/schema/mule/scripting http://www.mulesoft.org/schema/mule/scripting/current/mule-scripting.xsd
http://www.mulesoft.org/schema/mule/ee/tracking http://www.mulesoft.org/schema/mule/ee/tracking/current/mule-tracking-ee.xsd
http://www.mulesoft.org/schema/mule/validation http://www.mulesoft.org/schema/mule/validation/current/mule-validation.xsd
http://www.mulesoft.org/schema/mule/json http://www.mulesoft.org/schema/mule/json/current/mule-json.xsd
http://www.mulesoft.org/schema/mule/ee/dw http://www.mulesoft.org/schema/mule/ee/dw/current/dw.xsd
http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd
http://www.mulesoft.org/schema/mule/db http://www.mulesoft.org/schema/mule/db/current/mule-db.xsd">
	<jms:activemq-connector name="Active_MQ"
		specification="1.1" username="${activemq.username}" password="${activemq.password}" brokerURL="${activemq.brokerurl}"
		validateConnections="true" maxRedelivery="-1" doc:name="Active MQ" >
        <reconnect-forever/>
    </jms:activemq-connector>
	<jms:jmsmessage-to-object-transformer
		returnClass="java.util.LinkedHashMap" name="JMSMessage_to_Object"
		doc:name="JMSMessage to Object" />
    <db:mysql-config name="MySQL_Configuration" host="${database.host}" port="${database.port}" user="${database.username}" password="${database.password}" database="${database.dbname}" doc:name="MySQL Configuration"/>
    <flow name="howto-mule-exceptions-example">
        <jms:inbound-endpoint queue="queueIn" connector-ref="Active_MQ" mimeType="application/json" doc:name="JMS Dequeue">
            <jms:transaction action="BEGIN_OR_JOIN"/>
        </jms:inbound-endpoint>
        <logger message="Consuming try: #[message.inboundProperties.'JMSXDeliveryCount' == null  ? 1 : message.inboundProperties.'JMSXDeliveryCount']" level="INFO" doc:name="Log Delivery Count"/>
        <set-variable variableName="originalPayload" value="#[payload]" doc:name="Save Original Payload"/>
        <dw:transform-message doc:name="Convert to Java Map">
            <dw:set-payload><![CDATA[%dw 1.0
%output application/java
---
payload]]></dw:set-payload>
        </dw:transform-message>
        <choice doc:name="Choice">
            <when expression="#[payload.type == 'business']">
                <flow-ref name="Validation-Exception" doc:name="Test Validation Exception"/>
            </when>
            <when expression="#[payload.type == 'system']">
                <flow-ref name="Database-Unavailable" doc:name="Test Database Unavailable Exception"/>
            </when>
            <otherwise>
                <logger message="No Exception Scenario" level="INFO" doc:name="Log No Exception Scenario"/>
            </otherwise>
        </choice>
        <exception-strategy ref="global-exception-handlerChoice_Exception_Strategy" doc:name="Reference Global Exception Strategy"/>
    </flow>
    <sub-flow name="Database-Unavailable">
        <db:insert config-ref="MySQL_Configuration" doc:name="Non-existent Database" autoGeneratedKeys="true" autoGeneratedKeysColumnNames="id" transactionalAction="NOT_SUPPORTED">
            <db:parameterized-query><![CDATA[insert into demo (fieldName_1, fieldValue_1, fieldName_2, fieldValue_2) values ('type', #[payload.type], 'email', #[payload.email])]]></db:parameterized-query>
        </db:insert>
    </sub-flow>
    <sub-flow name="Validation-Exception">
        <validation:is-email email="#[payload.email]" doc:name="Validate Email Payload"/>
    </sub-flow>
</mule>
