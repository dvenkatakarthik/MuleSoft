<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:db="http://www.mulesoft.org/schema/mule/db" 
	xmlns:batch="http://www.mulesoft.org/schema/mule/batch"
	xmlns:tracking="http://www.mulesoft.org/schema/mule/ee/tracking"
	xmlns:sfdc="http://www.mulesoft.org/schema/mule/sfdc" 
	xmlns="http://www.mulesoft.org/schema/mule/core" 
	xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
	xmlns:spring="http://www.springframework.org/schema/beans" 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.mulesoft.org/schema/mule/batch http://www.mulesoft.org/schema/mule/batch/current/mule-batch.xsd
http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-current.xsd
http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/sfdc http://www.mulesoft.org/schema/mule/sfdc/current/mule-sfdc.xsd
http://www.mulesoft.org/schema/mule/ee/tracking http://www.mulesoft.org/schema/mule/ee/tracking/current/mule-tracking-ee.xsd
http://www.mulesoft.org/schema/mule/db http://www.mulesoft.org/schema/mule/db/current/mule-db.xsd">

	<!-- This is the endpoints file. In this file you should declare all your inbound and outbound endpoints in order to control the access to your integration -->

    <flow name="triggerSyncFromSalesforceFlow"  processingStrategy="synchronous" initialState="started">
		<poll doc:name="Poll">
			<fixed-frequency-scheduler frequency="${poll.frequencyMillis}" startDelay="1000" />
			<watermark variable="salesforceLastQueryDate" default-expression="${sfdc.watermark.default.expression}" selector="MAX" selector-expression="#[payload.LastModifiedDate]" />
            <processor-chain doc:name="Processor Chain">
				<expression-component doc:name="lock processing to avoid two syncs occurring at the same time"><![CDATA[app.registry['PollSynchronizer'].lock();]]></expression-component>
                <sfdc:query config-ref="Salesforce" query="dsql:SELECT Alias, Email, EmailEncodingKey, FirstName, LanguageLocaleKey, LastModifiedById, LastModifiedDate, LastName, LocaleSidKey, ProfileId, TimeZoneSidKey, Username,CommunityNickname FROM User WHERE LastModifiedDate &gt; #[flowVars.salesforceLastQueryDate] AND (LastModifiedById &lt;&gt; '${sfdc.integration.user.id}') ORDER BY LastModifiedDate ASC LIMIT 200" doc:name="fetch users from Salesforce"/>

            </processor-chain>

		</poll>
        <set-variable variableName="sfdc2dbProfilesMap" value="#[${from.sfdc.to.db.profilesMap}]" doc:name="load sfdc2db ProfilesMap"/>
        <batch:execute name="fromSalesforceToDBBatch" doc:name="trigger fromSalesforceToDBBatch"/>
		<exception-strategy ref="defaultChoiceExceptionStrategy" doc:name="catch Exception and call defaultChoiceExceptionStrategy"/>
	</flow>
    
	<flow name="triggerSyncFromDatabaseFlow"  processingStrategy="synchronous" initialState="started">
   		<poll doc:name="Poll">
			<fixed-frequency-scheduler frequency="${poll.frequencyMillis}" startDelay="1000" />
			<watermark variable="databaseLastQueryDate" default-expression="${db.watermark.default.expression}" selector="MAX" selector-expression="#[payload.LastModifiedDate]" />
            <processor-chain doc:name="Processor Chain">
                <expression-component doc:name="lock processing to avoid two syncs occurring at the same time"><![CDATA[app.registry['PollSynchronizer'].lock();]]></expression-component>
                <db:select config-ref="Database" doc:name="fetch users from Database">
                    <db:parameterized-query><![CDATA[SELECT Alias, CommunityNickname, Email,EmailEncodingKey, FirstName,LanguageLocaleKey, LastModifiedById, LastModifiedDate, LastName, LocaleSidKey, ProfileId, TimeZoneSidKey, Title, Username FROM User WHERE LastModifiedDate > #[flowVars.databaseLastQueryDate] AND (LastModifiedById != '${db.integration.user.id}') ORDER BY LastModifiedDate ASC]]></db:parameterized-query>



                </db:select>
            </processor-chain>

		</poll>
        <set-variable variableName="db2sfdcProfilesMap" value="#[${from.db.to.sfdc.profilesMap}]" doc:name="load db2sfdc ProfilesMap"/>
        <batch:execute name="fromDBToSalesforceBatch" doc:name="trigger fromDBToSalesforceBatch"/>
        <exception-strategy ref="defaultChoiceExceptionStrategy" doc:name="catch Exception and call defaultChoiceExceptionStrategy"/>
    </flow>

</mule>
